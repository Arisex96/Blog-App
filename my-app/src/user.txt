import { Hono } from "hono";
import bcrypt from "bcrypt";

import { PrismaClient } from "@prisma/client/edge";
import { withAccelerate } from "@prisma/extension-accelerate";

import { sign, decode, verify } from "hono/jwt";

import {
  getCookie,
  setCookie,
} from "hono/cookie";

const app = new Hono<{
  Bindings: {
    DATABASE_URL: string;
    JWT_SECRET: string;
  },
  Variables:{
    prisma:any
  }
}>();

app.use("/*",async (c,next)=>{
  const prisma = new PrismaClient({
    datasourceUrl: c.env.DATABASE_URL,
  }).$extends(withAccelerate());

  c.set("prisma",prisma)//stores custom var to c object

  await next()
})

//middleware fro login checks
app.use("/api/user/*", async (c, next) => {
  
  const prisma = c.var.prisma;

  const user_token = getCookie(c, "token");

  console.log("token-> " + user_token);

  if (!user_token) {
    console.log("no token present");
    return c.json({
      message: "no token present",
    });
  }
  const decoded_id =await verify(user_token,c.env.JWT_SECRET);

  console.log("decoded id -> "+decoded_id);

  const check1 = await prisma.user.findUnique({
    where: {
      id: decoded_id,
    },
  });
  if (!check1) {
    console.log("user does not exsist");
    return c.json({
      message: "user does not exist",
    });
  }
  console.log("user is logged in-> ");
  console.log(check1);

  await next();
});

// app.use('/api/user/*', async (c, next) => {

//   console.log("enter middleware---------")
// 	const jwt = c.req.header('Authorization');
//   console.log("jwt-> "+jwt);
// 	if (!jwt) {
// 		c.status(401);
// 		return c.json({ error: "unauthorized" });
// 	}
// 	const token = jwt.split(' ')[1];
//   console.log("token-> "+token);

// 	const payload = await verify(token, c.env.JWT_SECRET);
//   console.log("payload-> "+payload);
// 	if (!payload) {
// 		c.status(401);
// 		return c.json({ error: "unauthorized" });
// 	}
// 	c.set('userId', payload.id);
// 	await next()
// })

app.post("/api/signup", async (c) => {
  console.log("enter signup api-----------");

  //any env var can only be get thorught c
  //in a serverless env

  const prisma = new PrismaClient({
    datasourceUrl: c.env.DATABASE_URL,
  }).$extends(withAccelerate());

  const body = await c.req.json();
  console.log("body");
  console.log(body);

  const hashedPassword = await bcrypt.hash(body.password, 10);

  try {
    const new_user = await prisma.user.create({
      data: {
        email: body.email,
        password: hashedPassword,
      },
    });

    console.log("New user created");

    const jwt = await sign({ id: new_user.id }, c.env.JWT_SECRET);

    console.log("jwt token created -> " + jwt);

    setCookie(c,"token",jwt);

    return c.json({ jwt });
  } catch (e) {
    console.log("Failed to created new user");
    console.log(e);
    return c.json({
      success: false,
    });
  }
});

app.post("/api/signin", async (c) => {
  const prisma = c.var.prisma

  const body = await c.req.json();

  const user = await prisma.user.findUnique({
    where: {
      email: body.email,
    },
  });

  if (!user) {
    console.log("user does not exsist");
    return c.json({
      message: "user does not exsist",
    });
  }

  console.log("user exsist-> ");

  if (!(await bcrypt.compare(body.password, user.password))) {
    console.log("invalid password");
    return c.json({
      messaage: "inavild password",
    });
  }

  const jwt = await sign(user.id, c.env.JWT_SECRET);

  setCookie(c,"token",jwt);

  console.log("jwt token created -> " + jwt);

  return c.json({ jwt });
});

app.get("/", (c) => {
  return c.text("Hello Hono!");
});


export default app;
